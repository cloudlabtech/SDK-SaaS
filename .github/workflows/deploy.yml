# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: SDK Packages CI/CD
on:
  workflow_dispatch: # runs manually
  push:
    tags:
      - "*-alpha*"
      - "*-beta*"
      - "v*.*.*"
concurrency:
  group: cid-cd-sdk-${{ github.ref }}
  cancel-in-progress: true
jobs:
  build-stage:
    name: CI Stage - Build
    env: 
      BUILD_CONFIG: 'Release'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        dotnet-version:
          - '7.0.x' # Already produces net6.0 and net7.0 binaries due the <TargetFrameworks> MSBuild property
    timeout-minutes: 5
    steps:
    # SETUP STEP - dotnet versions install
    - name: Setup .NET SDK ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ matrix.dotnet-version }}      

    # GIT CHECKOUT STEP - Get latest sources from git
    - name: Checkout source
      uses: actions/checkout@v3

    # RESTORE STEP - dotnet restore **/*.csproj
    - name: dotnet restore CloudLab.SDK
      run: dotnet restore ./src/CloudLab.SDK/CloudLab.SDK.csproj --verbosity detailed

    - name: dotnet restore CloudLab.SDK.MongoDB
      run: dotnet restore ./src/CloudLab.SDK.MongoDB/CloudLab.SDK.MongoDB.csproj --verbosity detailed

    - name: dotnet restore CloudLab.SDK.Tests
      run: dotnet restore ./src/CloudLab.SDK.Tests/CloudLab.SDK.Tests.csproj --verbosity detailed

    - name: dotnet restore CloudLab.SDK.MongoDB.Tests
      run: dotnet restore ./src/CloudLab.SDK.MongoDB.Tests/CloudLab.SDK.MongoDB.Tests.csproj --verbosity detailed

    # BUILD STEP - dotnet build **/*.csproj
    - name: dotnet build CloudLab.SDK
      run: dotnet build ./src/CloudLab.SDK/CloudLab.SDK.csproj --configuration $BUILD_CONFIG --no-restore --verbosity detailed

    - name: dotnet build CloudLab.SDK.MongoDB
      run: dotnet build ./src/CloudLab.SDK.MongoDB/CloudLab.SDK.MongoDB.csproj --configuration $BUILD_CONFIG --no-restore --verbosity detailed

    - name: dotnet build CloudLab.SDK.Tests
      run: dotnet build ./src/CloudLab.SDK.Tests/CloudLab.SDK.Tests.csproj --configuration $BUILD_CONFIG --no-restore --verbosity detailed

    - name: dotnet build CloudLab.SDK.MongoDB.Tests
      run: dotnet build ./src/CloudLab.SDK.MongoDB.Tests/CloudLab.SDK.MongoDB.Tests.csproj --configuration $BUILD_CONFIG --no-restore --verbosity detailed

    # TEST STEP - dotnet test **/*.Tests.csproj
    - name: dotnet test CloudLab.SDK.Tests
      run: dotnet test ./src/CloudLab.SDK.Tests/CloudLab.SDK.Tests.csproj --configuration $BUILD_CONFIG --no-restore --no-build --verbosity detailed

    - name: dotnet test CloudLab.SDK.MongoDB.Tests
      run: dotnet test ./src/CloudLab.SDK.MongoDB.Tests/CloudLab.SDK.MongoDB.Tests.csproj --configuration $BUILD_CONFIG --no-restore --no-build --verbosity detailed

    # PUBLISH ARTIFACTS STEP - CloudLab.SDK Binaries Artifacts
    - name: Publish Artifacts CloudLab.SDK
      uses: actions/upload-artifact@v3
      with:
        name: sdk-artifacts
        path: ./src/CloudLab.SDK/bin/Release/
        if-no-files-found: error
        retention-days: 7

    # PUBLISH ARTIFACTS STEP - CloudLab.SDK.MongoDB Binaries Artifacts
    - name: Publish Artifacts CloudLab.SDK.MongoDB
      uses: actions/upload-artifact@v3
      with:
        name: sdk-mongodb-artifacts
        path: ./src/CloudLab.SDK.MongoDB/bin/Release/
        if-no-files-found: error
        retention-days: 7

  publish-github-packages:
    name: CD Stage - Deploy to GitHub
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        dotnet-version:
          - '7.0.x' # Already produces net6.0 and net7.0 binaries due the <TargetFrameworks> MSBuild property
    timeout-minutes: 5
    needs: build-stage
    steps:
    # SETUP STEP - dotnet versions install
    - name: Setup .NET SDK ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ matrix.dotnet-version }}      
    
    # DOWNLOAD ARTIFACTS STEP - CloudLab.SDK binaries
    - name: Download sdk-artifacts
      uses: actions/download-artifact@v3
      with:
        name: sdk-artifacts
        path: ./sdk-artifacts
    - name: Display structure of downloaded artifact files
      run: ls -R
      working-directory: ./sdk-artifacts

    # DOWNLOAD ARTIFACTS STEP - CloudLab.SDK.MongoDB binaries
    - name: Download sdk-mongodb-artifacts
      uses: actions/download-artifact@v3
      with:
        name: sdk-mongodb-artifacts
        path: ./sdk-mongodb-artifacts
    - name: Display structure of downloaded artifact files
      run: ls -R
      working-directory: ./sdk-mongodb-artifacts

    # PUBLISH STEP - dotnet nuget push GitHub Package Repository for CloudLab.SDK binaries
    - name: Push CloudLab.SDK to GitHub Package Repository
      run: dotnet nuget push ./sdk-artifacts/*.nupkg --api-key ${{ secrets.GITHUB_TOKEN }} --source "https://nuget.pkg.github.com/cloudlabtech/index.json" --skip-duplicate

    # PUBLISH STEP - dotnet nuget push GitHub Package Repository for CloudLab.SDK.MongoDB binaries
    - name: Push CloudLab.SDK.MongoDB to GitHub Package Repository
      run: dotnet nuget push ./sdk-mongodb-artifacts/*.nupkg --api-key ${{ secrets.GITHUB_TOKEN }} --source "https://nuget.pkg.github.com/cloudlabtech/index.json" --skip-duplicate

  publish-nugetorg:
    name: CD Stage - Deploy to NuGet.org
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        dotnet-version:
          - '7.0.x' # Already produces net6.0 and net7.0 binaries due the <TargetFrameworks> MSBuild property
    timeout-minutes: 5
    needs: build-stage
    steps:
    # SETUP STEP - dotnet versions install
    - name: Setup .NET SDK ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ matrix.dotnet-version }}      
    
    # DOWNLOAD ARTIFACTS STEP - CloudLab.SDK binaries
    - name: Download sdk-artifacts
      uses: actions/download-artifact@v3
      with:
        name: sdk-artifacts
        path: ./sdk-artifacts
    - name: Display structure of downloaded artifact files
      run: ls -R
      working-directory: ./sdk-artifacts

    # DOWNLOAD ARTIFACTS STEP - CloudLab.SDK.MongoDB binaries
    - name: Download sdk-mongodb-artifacts
      uses: actions/download-artifact@v3
      with:
        name: sdk-mongodb-artifacts
        path: ./sdk-mongodb-artifacts
    - name: Display structure of downloaded artifact files
      run: ls -R
      working-directory: ./sdk-mongodb-artifacts

    # PUBLISH STEP - dotnet nuget push NuGet.org Package Repository for CloudLab.SDK binaries
    - name: Push CloudLab.SDK to NuGet.org Package Repository
      run: dotnet nuget push ./sdk-artifacts/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate    

    # PUBLISH STEP - dotnet nuget push NuGet.org Package Repository for CloudLab.SDK.MongoDB binaries
    - name: Push CloudLab.SDK.MongoDB to NuGet.org Package Repository
      run: dotnet nuget push ./sdk-mongodb-artifacts/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate    

  create-github-release:
    name: CD Stage - Create GitHub Release
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs:
      - publish-github-packages
      - publish-nugetorg
    steps:
    # GIT CHECKOUT STEP - Get latest sources from git
    - name: Checkout source
      uses: actions/checkout@v3

    # DOWNLOAD ARTIFACTS STEP - CloudLab.SDK binaries
    - name: Download sdk-artifacts
      uses: actions/download-artifact@v3
      with:
        name: sdk-artifacts
        path: ./sdk-artifacts
    - name: Display structure of downloaded artifact files
      run: ls -R
      working-directory: ./sdk-artifacts

    # DOWNLOAD ARTIFACTS STEP - CloudLab.SDK.MongoDB binaries
    - name: Download sdk-mongodb-artifacts
      uses: actions/download-artifact@v3
      with:
        name: sdk-mongodb-artifacts
        path: ./sdk-mongodb-artifacts
    - name: Display structure of downloaded artifact files
      run: ls -R
      working-directory: ./sdk-mongodb-artifacts
    
    # CREATE GITHUB PRE-RELEASE STEP - When we have 'alpha' or 'beta' in the branch name, we mark the github  release as 'pre-release'.
    - name: Create GitHub Pre-Release
      id: create-github-pre-release 
      uses: softprops/action-gh-release@v1
      if: contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta')
      with:
        tag_name: ${{ github.ref_name }}
        name: Pre-Release ${{ github.ref_name }}
        draft: false
        prerelease: true # <--- PRE RELEASE
        generate_release_notes: true
        files: |
          ./sdk-artifacts/*
          ./sdk-artifacts/net6.0/*
          ./sdk-artifacts/net7.0/*
          ./sdk-mongodb-artifacts/*
          ./sdk-mongodb-artifacts/net6.0/*
          ./sdk-mongodb-artifacts/net7.0/*
        
    # CREATE GITHUB RELEASE STEP - When we do not have 'alpha' or 'beta' in the branch name, we mark the github release as 'release'.
    - name: Create GitHub Release
      id: create-github-release 
      uses: softprops/action-gh-release@v1
      if: ${{ !contains(github.ref_name, 'alpha') && !contains(github.ref_name, 'beta') }}
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false # <-- RELEASE
        generate_release_notes: true
        files: |
          ./sdk-artifacts/*
          ./sdk-artifacts/net6.0/*
          ./sdk-artifacts/net7.0/*
          ./sdk-mongodb-artifacts/*
          ./sdk-mongodb-artifacts/net6.0/*
          ./sdk-mongodb-artifacts/net7.0/*
          

